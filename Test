    /*********************************************/
    /*************  Check Code   ***************/
    if (post.Code.trim() == "", post.Code.trim() == null || post.Code.trim() == undefined) {
        res.send({ state: false, message: 'The ID field is required.' });
        return false;
    }

    if (/[^\d]/.test(post.Code.trim()) == true) {
        res.send({ state: false, message: 'The ID number must not contain non-numeric characters.' })
        return false;
    }

    if (6 > post.Code.trim().length > 10) {
        res.send({ state: false, message: 'The ID number must contain 6 to 10 digits.' })
        return false;
    }

    /*********************************************/
    /**************** Check Name  ****************/
    // This field is required.
    if (post.Name.trim() == "" || post.Name.trim() == null || post.Name.trim() == undefined) {
        res.send({ state: false, message: 'The name field is required.' });
        return false;
    }
    // The field contain many spaces between names.
    if (Form.Name.MultiSpace.test(post.Name.trim()) == true) {
        res.send({ state: false, message: 'The name field contain many spaces between names.' })
        return false;
    }
    // The field must not contain numbers.
    if (Form.Name.Numbers.test(post.Name.trim()) == true) {
        res.send({ state: false, message: 'The name must not contain numbers.' })
        return false;
    }
    // The field must not contain name(s) of more than 15 characters.
    if (Math.max(...post.Name.trim().split(' ').map(p => p.length)) > 15) {
        res.send({ state: false, message: 'The name must not contain name(s) of more than 15 characters.' })
        return false;
    }
    // The field must not contain name(s) of less than 3 characters.
    if (Math.min(...post.Name.trim().split(' ').map(p => p.length)) < 3) {
        res.send({ state: false, message: 'The name must not contain name(s) of less than 3 characters.' })
        return false;
    }
    // The name must not contain special characters.
    if (Form.Name.SpecialCharacters.test(post.Name.trim()) == true) {
        res.send({ state: false, message: 'The name must not contain special characters.' });
        return false;
    }

    /*********************************************/
    /*************** Check Email  ****************/
    if (post.Email.trim() == "" || post.Email.trim() == null || post.Email.trim() == undefined) {
        res.send({ state: false, message: 'The e-mail field is required.' });
        return false;
    }

    // The field contain spaces.
    if (6 <= post.Email.match(Form.Email.UserName).length <= 30) {
        res.send({ state: false, message: 'The email username must contain between 6 and 30 characters.' })
        return false;
    }

    // The field contain spaces.
    if (Form.Email.Spaces.test(post.Name.trim()) == true) {
        res.send({ state: false, message: 'The e-mail field not must contain spaces.' })
        return false;
    }

    // The field must contain only one @ character.
    if (post.Email.match(Form.Email.Symbol).length != 1) {
        res.send({ state: false, message: 'The email must contain only one @ character.' })
        return false;
    }

    // The field must not start with a special characters.
    if (Form.Email.InitSCharacter.test(post.Email.trim()) == true) {
        res.send({ state: false, message: 'The email username must not start with a special character.' })
    }

    // The field must not contain consecutive special characters.
    if (Form.Email.MultiSCharacter.test(post.Email.trim()) == true) {
        res.send({ state: false, message: 'The email username must not contain consecutive special characters.' })
    }

    // The field must not end with a period.
    if (Form.Email.CharArroba.test(post.Email.trim()) == true) {
        res.send({ state: false, message: 'The email username must not end with a period.' })
    }

    // The field must not contain.
    if (Form.Email.UserName.test(post.Email.trim()) == false) {
        res.send({ state: false, message: 'The email username is not correct.' })
    }

    /*********************************************/
    /************** Check Password ***************/
    if (post.Password.trim() == "" || post.Password.trim() == null || post.Password.trim() == undefined) {
        res.send({ state: false, message: 'The e-mail field is required.' });
        return false;
    }
    // The field contain spaces.
    if (Form.Password.Spaces.test(post.Name.trim()) == true) {
        res.send({ state: false, message: 'The password must not contain spaces.' })
        return false;
    }
    
    // The field contain acent characters.
    if (Form.Password.AcentCharacters.test(post.Name.trim()) == true) {
        res.send({ state: false, message: 'The password must not contain acent characters.' })
        return false;
    }

    // The field contain 1 capial letter.
    if (Form.Password.CapitaLetter.test(post.Name.trim()) == false) {
        res.send({ state: false, message: 'The password must contain at least 1 capital letter.' })
        return false;
    }

    // The field contain 1 lowercase letter.
    if (Form.Password.LowercaseLetter.test(post.Name.trim()) == false) {
        res.send({ state: false, message: 'The password must contain at least 1 lowercase letter.' })
        return false;
    }

    // The field contain 1 special character.
    if (Form.Password.SpecialCharacters.test(post.Name.trim()) == false) {
        res.send({ state: false, message: 'The password must contain at least 1 special character.' })
        return false;
    }

    // The field contain acent characters.
    if (RegexForm.Password.AcentCharacters.test(post.Name.trim()) == true) {
        res.send({ state: false, message: 'The password must not contain acent characters.' })
        return false;
    }

    /***************     Save    *****************/
    UsersModels.Guardar(post, function (Reply) {
        if (Reply.state == true) {
            res.json({ state: true, message: `User ${post.Name} has been successfully registered` })
        } else {
            res.json({ state: false, message: 'Error saving data' })
        }
    })
}

UsersController.CargarTodas = function (_req, res) {
    UsersModels.CargarTodas(null, function (Reply) {
        if (Reply.state == true) {
            res.json({ state: true, message: 'The user data has been loaded correctly' })
        } else {
            res.json({ state: false, message: 'There are no registered users' })
        }
    })
}
